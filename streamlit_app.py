import streamlit as st
from youtube_transcript_api import YouTubeTranscriptApi
import openai
from gtts import gTTS
from moviepy.editor import *
import os

openai.api_key = st.secrets["OPENAI_API_KEY"]

st.title("üé¨ T·∫°o Video Phong C√°ch Web5ngay t·ª´ YouTube")
st.markdown("Ch·ªâ c·∫ßn d√°n link video Mark Tilbury, h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t·∫°o gi·ªçng + d·ª±ng video b·∫±ng ti·∫øng Vi·ªát")

video_url = st.text_input("Nh·∫≠p link video YouTube:")
run_button = st.button("T·∫°o Video")

@st.cache_data
def get_transcript(video_id):
    transcript = YouTubeTranscriptApi.get_transcript(video_id)
    text = " ".join([item['text'] for item in transcript])
    return text

def rewrite_script(text):
    prompt = f"""
    Vi·∫øt l·∫°i n·ªôi dung sau th√†nh phong c√°ch k·ªÉ chuy·ªán truy·ªÅn c·∫£m h·ª©ng nh∆∞ Web5ngay, b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn, r√µ r√†ng:
    {text}
    """
    response = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content.strip()

def generate_voice(text, filename="voice.mp3"):
    tts = gTTS(text=text, lang='vi')
    tts.save(filename)
    return filename

def create_video(voice_file, output_file="output.mp4"):
    bg = ColorClip(size=(1280, 720), color=(10,10,10), duration=60)
    audio = AudioFileClip(voice_file)
    video = bg.set_audio(audio).set_duration(audio.duration)
    video.write_videofile(output_file, fps=24)
    return output_file

if run_button and video_url:
    try:
        video_id = video_url.split("v=")[-1].split("&")[0]
        with st.spinner("ƒêang l·∫•y transcript..."):
            raw_text = get_transcript(video_id)

        with st.spinner("ƒêang chuy·ªÉn th·ªÉ sang phong c√°ch Web5ngay..."):
            viet_text = rewrite_script(raw_text)
            st.text_area("K·ªãch b·∫£n ti·∫øng Vi·ªát:", viet_text, height=250)

        with st.spinner("ƒêang t·∫°o gi·ªçng ƒë·ªçc..."):
            voice_path = generate_voice(viet_text)

        with st.spinner("ƒêang d·ª±ng video..."):
            video_path = create_video(voice_path)

        st.success("üéâ Ho√†n t·∫•t! T·∫£i video b√™n d∆∞·ªõi")
        st.video(video_path)
        with open(video_path, "rb") as f:
            st.download_button("üì• T·∫£i video", f, file_name="video_web5ngay.mp4")

    except Exception as e:
        st.error(f"L·ªói: {e}")
